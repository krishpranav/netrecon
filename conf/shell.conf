[hostlist]
scan/nmap/default = nmap -oX $outfile $rhost
scan/nmap/ping scan = nmap -sn -oX $outfile $rhost
scan/nmap/os identify = sudo nmap -O -oX $outfile $rhost
scan/nmap/connect scan = nmap -sT $rhost -oX $outfile
scan/nmap/SYN scan = nmap -sS $rhost -oX $outfile
scan/nmap/ACK scan = nmap -sA $rhost -oX $outfile
scan/nmap/UDP scan = nmap -sU $rhost -oX $outfile
scan/nmap/SCTP init scan = nmap -sY $rhost -oX $outfile
scan/nmap/Window scan = nmap -sW $rhost -oX $outfile
scan/nmap/Maimon scan = nmap -sM $rhost -oX $outfile

scan/nmap/advanced/quick scan = nmap -T4 -F $rhosts -oX $outfile
scan/nmap/advanced/intense scan = nmap -T4 -A -v -oX $outfile $rhost
scan/nmap/advanced/intense scan + udp = sudo nmap -sS -sU -T4 -A -v -oX $outfile $rhost
scan/nmap/advanced/intense scan all tcp = nmap -p 1-65535 -T4 -A -v -oX $outfile $rhost
scan/nmap/advanced/intense scan no-ping = nmap -T4 -A -v -Pn -oX $outfile $rhost
scan/nmap/advanced/slow comprehensive scan = nmap -sS -sU -T4 -A -v -PE -PP -PS80,443 -PA3389 -PU40125 -PY -g 53 --script "default or (discovery and safe)" $rhost -oX $outfile

scan/nmap/nse/default = script -sC $rhost -oX $outfile
scan/nmap/nse/traceroute geolocate = sudo nmap --traceroute --script traceroute-geolocation.nse -oX $outfile $rhost 
scan/nmap/nse/dnsbrute = nmap --script dns-brute.nse -oX $outfile $domain
scan/nmap/nse/hostmap = nmap --script hostmap-bfk.nse -oX $outfile $rhost

scan/masscan/full tcp = sudo masscan -oX $outfile -p0-65535 --rate 10000 --banner $rhost

scan/unicornscan/basic scan = sudo unicornscan $rhost
scan/unicornscan/tcp scan = sudo unicornscan -mT $rhost
scan/unicornscan/udp scan = sudo unicornscan -mU $rhost

assessment/searchsploit = nmap -sV -sC $rhost -oX $outfile ; searchsploit --nmap $outfile 
assessment/vulners = nmap -sV --script=$scripts/vulners.nse -oX $outfile $rhost

get from shodan = python3 $scripts/smap.py --out $outfile $rhost
get geolocation = curl -vvv "http://www.geoplugin.net/json.gp?ip=$rhost" > $outfile

search on/bugmenot = python3 $scripts/bugmenot.py -s $domain
search on/xssed = nmap -oX $outfile --script http-xssed.nse $domain

msf/enum_dns = msfconsole -n -q -x "use auxiliary/gather/enum_dns; set DOMAIN $domain; run; exit;"
msf/search_email_collector = msfconsole -n -q -x "use  auxiliary/gather/search_email_collector; set DOMAIN $domain; run; exit;"

run/dmitry = dmitry -winsepo /tmp/dmitry-$domain.txt $domain
run/dnsrecon = dnsrecon -d $domain -D $wordlists/subdomains.txt -t std
run/dnsenum = dnsenum $domain -f $wordlists/subdomains.txt
run/sublist3r = sublist3r -d $domain
run/knockpy = knockpy $domain
run/theharvester = theharvester -d $domain -l 500 -b all
run/webarchive_subdomains = curl -s "http://web.archive.org/cdx/search/cdx?url=*.$domain/*&output=text&fl=original&collapse=urlkey" |sort| sed -e 's_https*://__' -e "s/\/.*//" -e 's/:.*//' -e 's/^www\.//' | sort -u


netutils/dig = dig $domain
netutils/whois/ip = whois $rhost
netutils/whois/domain = whois $domain

[generic]
ncat = ncat -v $rhost $rport
openssl client = openssl s_client -connect $rhost:$rport
grab banner = echo | nc -v -n -w1 $rhost $rport
searchsploit = nmap -sV -sC $rhost -p $rport -oX $outfile ; searchsploit --nmap $outfile 
sploitus = python3 $scripts/sploitus.py "$banner"

nmap vulners = nmap -sV --script=$scripts/vulners.nse -p$rport -oX $outfile $rhost
nmap grab banner = nmap -sV --script=banner -oX $outfile -p$rport $rhost
nmap default scripts = nmap -sV -sC -oX $outfile -p$rport $rhost

masscan grab banner = sudo masscan -oX $outfile -p$rport --banner $rhost

[http]
scan with/arachni = sudo arachni http://$rhost:$rport
scan with/sqlmap = sqlmap --url=http://$rhost:$rport/ --keep-alive --crawl=10 --threads=5 --eta --batch --level=5 --risk=3 --banner --is-dba --dbs --tables -s /tmp/scan_report.txt --flush-session -t /tmp/scan_trace.txt --fresh-queries
scan with/commix = commix --crawl=2 --url http://$rhost:$rport/
scan with/skipfish = skipfish -o /tmp/skip http://$rhost:$rport
scan with/wpscan = wpscan -e t,tt,u,p --url http://$rhost:$rport/
scan with/joomscan = joomscan -u http://$rhost:$rport/
scan with/nikto = nikto -h $rhost:$rport
scan with/wapiti = wapiti -u http://$rhost:$rport/

clone with/httrack = httrack http://$rhost:$rport -O /tmp/httrack-$rhost:$rport
clone with/wget = wget --mirror --execute robots=off --no-verbose --convert-links --backup-converted --page-requisites --adjust-extension --base=/tmp/ --directory-prefix=/tmp/ --span-hosts --domains=$domain http://$rhost:$rport/

whatweb = whatweb $rhost:$rport
wfuzz = wfuzz -c -u http://$rhost:$rport/FUZZ --hc 404 -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt
dirb = dirb http://$rhost:$rport
wafw00f = wafw00f http://$rhost:$rport
sslscan = sslscan --verbose --sni-name=$domain $rhost:$rport

gobuster/top1000 robots disallowed = gobuster -e -u http://$rhost:$rport/ -w $wordlists/http/Top1000-RobotsDisallowed.txt
gobuster/top10000 robots disallowed = gobuster -e -u http://$rhost:$rport/ -w $wordlists/http/Top10000-RobotsDisallowed.txt

dirsearch/default iis = dirsearch --url http://$rhost:$rport/ -r -t 4 -e asp,aspx,htm,html,txt,sql,js,ashx
dirsearch/default php = dirsearch --url http://$rhost:$rport/ -r -t 4 -e php,php5,php4,phtml,php7,htm,html,sql,js,txt
dirsearch/default cgi = dirsearch --url http://$rhost:$rport/ -r -t 4 -e cgi,html,htm,sql,js,txt
dirsearch/junk files = dirsearch --url http://$rhost:$rport/ -r -t 4 -e txt,rar,zip,7z,config,conf,pdf,sql,sqlite,dump

nmap/xssed = nmap -p$rport -oX $outfile --script http-xssed.nse $rhost
nmap/webdav scan = nmap --script http-webdav-scan -oX $outfile -p$rport $rhost
nmap/userdir enum= nmap -sV --script=http-userdir-enum -oX $outfile -p$rport $rhost
nmap/vhosts = nmap -sV --script=http-vhosts -oX $outfile -p$rport $rhost
nmap/waf detect = nmap -sV --script=http-waf-detect -oX $outfile -p$rport $rhost
nmap/waf fingerprint = nmap -sV --script=http-waf-fingerprint -oX $outfile -p$rport $rhost

msf/verb bypass = msfconsole -n -q -x "use auxiliary/scanner/http/verb_auth_bypass; set RHOSTS $rhost; set RPORT $rport; run; exit;"
msf/dir listing = msfconsole -n -q -x "use auxiliary/scanner/http/dir_listing; set RHOSTS $rhost; set RPORT $rport; run; exit;"
msf/cert = msfconsole -n -q -x "use auxiliary/scanner/http/cert; set RHOSTS $rhost; set RPORT $rport; run; exit;"
msf/openproxy = msfconsole -n -q -x "use auxiliary/scanner/http/open_proxy; set RHOSTS $rhost; set RPORT $rport; run; exit;"
msf/dirscanner = msfconsole -n -q -x "use auxiliary/scanner/http/dir_scanner; set RHOSTS $rhost; set RPORT $rport; run; exit;"
msf/files dit = msfconsole -n -q -x "use auxiliary/scanner/http/files_dir; set RHOSTS $rhost; set RPORT $rport; run; exit;"
msf/login = msfconsole -n -q -x "use auxiliary/scanner/http/http_login; set RHOSTS $rhost; set RPORT $rport; run; exit;"

[telnet]
nmap/brute = nmap --script telnet-brute -oX $outfile -p$rport $rhost
msf/version = msfconsole -n -q -x "use auxiliary/scanner/telnet/telnet_version; set RHOSTS $rhost;set RPORT $rport; run; exit;"
msf/login = msfconsole -n -q -x "use auxiliary/scanner/telnet/telnet_login; set RHOSTS $rhost; set RPORT $rport; run; exit;"
msf/encrypt overflow = msfconsole -n -q -x "use auxiliary/scanner/telnet/telnet_encrypt_overflow; set RHOSTS $rhost; set RPORT $rport; run; exit;"

[tftp]
connect = tftp $rhost
nmap/enum = nmap -sU -p$rport --script tftp-enum.nse --script-args tftp-enum.filelist=customlist.txt $rhost -oX $outfile

[ftp]
ftpclient = ftp $rhost $rport 
enum/users = perl $scripts/ftp-user-enum.pl -U $wordlists/users.txt -t $rhost
enum/user inetutils = perl $scripts/ftp-user-enum.pl -M iu -U $wordlists/users.txt -t $rhost

nmap/brute = nmap --script ftp-brute -oX $outfile -p$rport $rhost
nmap/vsftpd_backdoor = nmap --script ftp-vsftpd-backdoor -oX $outfile -p$rport $rhost

msf/version = msfconsole -n -q -x "use auxiliary/scanner/ftp/ftp_version; set RHOSTS $rhost; set RPORT $rport; run; exit;"
msf/anonymous = msfconsole -n -q -x "use auxiliary/scanner/ftp/anonymous; set RHOSTS $rhost; set RPORT $rport; run; exit;"

[ssh]
connect as root = ssh root@$rhost -p $rport

nmap/brute = nmap --script ssh-brute -oX $outfile -p$rport $rhost
nmap/ssh hostkey = nmap $rhost -p $rport -oX $outfile --script ssh-hostkey --script-args ssh_hostkey=all
nmap/ssh2 enum algos = nmap --script ssh2-enum-algos -oX $outfile -p$rport $rhost

msf/enumusers = msfconsole -n -q -x "use auxiliary/scanner/ssh/ssh_enumusers; set RHOSTS $rhost; set RPORT $rport; set USER_FILE $wordlists/users.txt; run; exit;"
msf/version = msfconsole -n -q -x "use auxiliary/scanner/ssh/ssh_version; set RHOSTS $rhost; set RPORT $rport; run; exit;"

[upnp]
nmap/info tcp = nmap -p $rport -oX $outfile --script=upnp-info $rhost
nmap/info udp = sudo nmap -sU -p $rport -oX $outfile --script=upnp-info $rhost

[domain]
dig = dig $domain @$rhost
nmap/zone transfer = nmap --script dns-zone-transfer.nse --script-args dns-zone-transfer.domain=$domain -p$rport -oX $outfile $rhost
nmap/service discovery tcp = nmap --script=dns-service-discovery -oX $outfile -p $rport $rhost
nmap/service discovery udp = sudo nmap -sU --script=dns-service-discovery -oX $outfile -p $rport $rhost

[netbios-ssn]
enum4linux = enum4linux $rhost
nbtscan = nbtscan $rhost
samrdump = python /usr/share/doc/python-impacket/examples/samrdump.py $rhost $rport/SMB
polenum = polenum $rhost
rpcclient null session = echo 'srvinfo' | rpcclient $rhost -U%

net enum domain admins = net rpc group members "Domain Admins" -I $rhost -U%

nmap/brute = nmap -sV --script=smb-brute -p$rport -oX $outfile $rhost
nmap/enum users = nmap --script smb-enum-users.nse -oX $outfile -p$rport $rhost
nmap/connection flood = nmap --script smb-flood.nse -p$rport $rhost 

msf/pipe auditor =  msfconsole -n -q -x "use auxiliary/scanner/smb/pipe_auditor; set RHOSTS $rhost; set RPORT $rport; run; exit;"
msf/pipe dcerpc_auditor = msfconsole -n -q -x "use auxiliary/scanner/smb/pipe_dcerpc_auditor; set RHOSTS $rhost; set RPORT $rport; run; exit;"
msf/enumshares = msfconsole -n -q -x "use auxiliary/scanner/smb/smb_enumshares; set RHOSTS $rhost; set RPORT $rport; run; exit;"
msf/enumeusers = msfconsole -n -q -x "use auxiliary/scanner/smb/smb_enumusers; set RHOSTS $rhost; set RPORT $rport; run; exit;"
msf/lookupsid = msfconsole -n -q -x "use auxiliary/scanner/smb/smb_lookupsid; set RHOSTS $rhost; set RPORT $rport; run; exit;"
msf/version = msfconsole -n -q -x "use auxiliary/scanner/smb/smb_version; set RHOSTS $rhost; set RPORT $rport; run; exit;"
msf/login = msfconsole -n -q -x "use auxiliary/scanner/smb/smb_login; set RHOSTS $rhost; set RPORT $rport; run; exit;"

[pop3]
nmap/ntlm info = nmap -p$rport --script pop3-ntlm-info $rhost -oX $outfile
nmap/brute = nmap -sV --script=pop3-brute -p$rport $rhost -oX $outfile
msf/version = msfconsole -n -q -x "use auxiliary/scanner/pop3/pop3_version; set RHOSTS $rhost; set RPORT $rport; run; exit;"

[smtp]
smtp user enum/VRFY = smtp-user-enum -M VRFY -U $wordlists/users.txt -t $rhost -p $rport
smtp user enum/RCPT = smtp-user-enum -M RCPT -U $wordlists/users.txt -t $rhost -p $rport
smtp user enum/EXPN = smtp-user-enum -M EXPN -U $wordlists/users.txt -t $rhost -p $rport

nmap/brute = nmap -sV --script smtp-brute -p$rport -oX $outfile $rhost
nmap/commands = nmap -sV --script smtp-commands -oX $outfile -p$rport $rhost
nmap/enum users = nmap --script smtp-enum-users.nse -oX $outfile -p$rport $rhost
nmap/open relay = nmap --script smtp-open-relay.nse -oX $outfile -p$rport $rhost

msf/version = msfconsole -n -q -x "use auxiliary/scanner/smtp/smtp; set RHOSTS $rhost; set RPORT $rport; run; exit;"

[snmp]
snmp-check = snmp-check -t $rhost -p $rport -c public
snmpwalk = snmpwalk -c public $rhost
onesixtyone = onesixtyone -c /usr/share/doc/onesixtyone/dict.txt $rhost
nmap/win32_users = nmap -sU -p$rport --script=snmp-win32-users -oX $outfile $rhost
nmap/brute = nmap -sU -p$rport --script snmp-brute -oX $outfile $rhost 
msf/enum = msfconsole -n -q -x "use auxiliary/scanner/snmp/snmp_enum; set RHOSTS $rhost; set RPORT $rport; run; exit;"
msf/enum shares = msfconsole -n -q -x "use auxiliary/scanner/snmp/snmp_enumshares; set RHOSTS $rhost; set RPORT $rport; run; exit;"
msf/enum users = msfconsole -n -q -x "use auxiliary/scanner/snmp/snmp_enumusers; set RHOSTS $rhost; set RPORT $rport; run; exit;"
msf/login = msfconsole -n -q -x "use auxiliary/scanner/snmp/snmp_login; set RHOSTS $rhost; set RPORT $rport; run; exit;"

[ntp]
nmap/ntpinfo = sudo nmap -sU -p $rport --script ntp-info -oX $outfile $rhost 
nmap/ntp monlist = sudo nmap -sU -p $rport --script ntp-monlist -oX $outfile $rhost 

[ldap]
ldapsearch = ldapsearch -h $rhost -p $rport -x -s base
nmap/brute = nmap -p$rport --script ldap-brute --script-args ldap.base='"cn=users,dc=cqure,dc=net"' -oX $outfile $rhost
nmap/rootdse = nmap -p$rport --script ldap-rootdse -oX $outfile $rhost

[rpcbind]
rpcinfo = rpcinfo -p $rhost

nmap/rpcinfo = nmap -sV --script=rpcinfo -oX $outfile -p$rport $rhost
nmap/rpc-grind = nmap -sV --script=rpc-grind --script-args 'rpc-grind.threads=8' -oX $outfile -p$rport $rhost

msf/rpcbomb = msfconsole -n -q -x "use auxiliary/dos/rpc/rpcbomb; set RHOSTS $rhost; set RPORT $rport; run; exit;"

[vnc]
vncviewer = vncviewer $rhost:$rport

nmap/brute = nmap -sV --script=vnc-brute -oX $outfile -p$rport $rhost
nmap/realvnc auth bypass = nmap -sV --script=realvnc-auth-bypass -p$rport $rhost

msf/login = msfconsole -n -q -x "use auxiliary/scanner/vnc/vnc_login; set RHOSTS $rhost; set RPORT $rport; run; exit;"
msf/none auth = msfconsole -n -q -x "use auxiliary/scanner/vnc/vnc_none_auth; set RHOSTS $rhost; set RPORT $rport; run; exit;"
msf/realvnc 41 bypass = msfconsole -n -q -x "use auxiliary/admin/vnc/realvnc_41_bypass; set RHOST $rhost; set AUTOVNC true; set RPORT $rport; run; exit;"

[ms-wbt-server]
rdesktop = rdesktop $rhost:$rport
nmap/enum encryption = nmap -p$rport -oX $outfile --script rdp-enum-encryption $rhost
nmap/vuln ms12-020 = nmap -sV --script=rdp-vuln-ms12-020 -oX $outfile -p$rport $rhost

[ms-sql-m]
connect as sa = python /usr/share/doc/python-impacket/examples/mssqlclient.py -p $rport sa@$rhost

nmap/info = nmap -p$rport --script ms-sql-info --script-args mssql.instance-port=$rport -oX $outfile $rhost
nmap/brute = nmap -sV --script=ms-sql-brute -oX $outfile -p$rport $rhost
nmap/empty password = nmap -sV --script=ms-sql-empty-password -oX $outfile -p$rport $rhost
nmap/ntlm_info = nmap -sV --script=ms-sql-ntlm-info -oX $outfile -p$rport $rhost
nmap/config = nmap -sV --script=ms-sql-config -oX $outfile -p$rport $rhost
nmap/dac = nmap -sV --script=ms-sql-dac -oX $outfile -p$rport $rhost

msf/login = msfconsole -n -q -x "use auxiliary/scanner/mssql/mssql_login; set RHOSTS $rhost; set RPORT $rport; run; exit;"
msf/enum = msfconsole -n -q -x "use auxiliary/admin/mssql/mssql_enum; set RHOSTS $rhost; set RPORT $rport; run; exit;"
msf/enum domain accounts = msfconsole -n -q -x "use auxiliary/admin/mssql/mssql_enum_domain_accounts; set RHOSTS $rhost; set RPORT $rport; run; exit;"
msf/enum domain accounts_sqli = msfconsole -n -q -x "use auxiliary/admin/mssql/mssql_enum_domain_accounts_sqli; set RHOSTS $rhost; set RPORT $rport; run; exit;"
msf/enum sql logins = msfconsole -n -q -x "use auxiliary/admin/mssql/mssql_enum_sql_logins; set RHOSTS $rhost; set RPORT $rport; run; exit;"
msf/exec = msfconsole -n -q -x "use auxiliary/admin/mssql/mssql_exec; set RHOSTS $rhost; set RPORT $rport; run; exit;"

[mysql]
connect as root = mysql -u root -h $rhost --port=$rport -p

nmap/audit = nmap --script=mysql-audit -p$rport -oX $outfile $rhost
nmap/enum = nmap --script=mysql-enum -p$rport -oX $outfile $rhost
nmap/brute = nmap -sV --script=mysql-brute -oX $outfile -p$rport $rhost
nmap/empty password = nmap -sV --script=mysql-empty-password -oX $outfile -p$rport $rhost
nmap/auth_bypass = nmap -sV --script=mysql-auth-bypass -p$rport -oX $outfile $rhost
nmap/users = nmap -sV --script=mysql-users -p$rport -oX $outfile $rhost
nmap/databases = nmap -sV --script=mysql-databases -p$rport -oX $outfile $rhost

msf/login = msfconsole -n -q -x "use auxiliary/scanner/mysql/mysql_login; set RHOSTS $rhost; set RPORT $rport; run; exit;"
msf/enum = msfconsole -n -q -x "use auxiliary/scanner/mysql/mysql_enum; set RHOSTS $rhost; set RPORT $rport; run; exit;"
msf/authbypass hashdump = msfconsole -n -q -x "use auxiliary/scanner/mysql/mysql_authbypass_hashdump; set RHOSTS $rhost; set RPORT $rport; run; exit;"

[oracle]
nmap/brute = nmap -sV --script=oracle-brute -p$rport -oX $outfile $rhost
nmap/brute stealth = nmap -sV --script=oracle-brute-stealth -p$rport -oX $outfile $rhost
nmap/enum users = nmap -sV --script=oracle-enum-users -p$rport -oX $outfile $rhost
nmap/sid brute = nmap -sV --script=oracle-sid-brute -p$rport -oX $outfile $rhost
nmap/tns version = nmap -sV --script=oracle-tns-version -p$rport -oX $outfile $rhost

[postgresql]
connect as postgres = psql -h $rhost -p $rport -U postgres

nmap/brute = nmap -p$rport -oX $outfile --script pgsql-brute $rhosts 

[finger]
finger/logged users = finger @$rhost
finger/connect as root = finger root@$rhost
finger/exploit empty gcos = finger 0@host
finger/exploit enum users = finger 'a b c d e f g h'@$rhost

enum users = perl $scripts/finger-user-enum.pl -U $wordlists/users.txt -t $rhost

[auth]
enum users = ident-user-enum $rhost $rport

[exec]
nmap/brute = nmap -p $rport --script rexec-brute -oX $outfile $rhost
msf/login = msfconsole -n -q -x "use auxiliary/scanner/rservices/rexec_login; set RHOSTS $rhost; set RPORT $rport; run; exit;"

[login]
connect as root = rlogin -l root $rhost
nmap/brute = nmap -p $rport --script rlogin-brute -oX $outfile $rhost
msf/login = msfconsole -n -q -x "use auxiliary/scanner/rservices/rexec_login; set RHOSTS $rhost; set RPORT $rport; run; exit;"

[nfs]
mount = mkdir /tmp/badkarma-nfs-$rhost; mount -t nfs $rhost:/ /tmp/badkarma-nfs-$rhost -o nolock

showmount/connected_users = showmount $rhost
showmount/export = showmount -e $rhost
showmount/mount_points = showmount -a $rhost
showmount/directories = showmount -d $rhost

